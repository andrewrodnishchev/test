import pytest
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from telegram import Bot
import asyncio
import tempfile

class TestLogin:
    total_tests = 0
    success_tests = 0
    failed_tests = 0

    @classmethod
    def setup_class(cls):
        options = webdriver.ChromeOptions()
        options.add_argument('--user-data-dir=' + tempfile.mkdtemp())
        options.add_argument('--headless')  # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--ignore-certificate-errors')
        options.add_argument('--disable-gpu')
        cls.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        cls.driver.implicitly_wait(10)

    @classmethod
    def teardown_class(cls):
        cls.driver.quit()
        cls.print_final_results()
        asyncio.run(cls.send_notification())

    @classmethod
    def print_final_results(cls):
        print(f"\n–ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"–£—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã: {cls.success_tests}")
        print(f"–ù–µ—É—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã: {cls.failed_tests}")

    @classmethod
    async def send_notification(cls):
        bot = Bot(token='YOUR_BOT_TOKEN')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
        chat_id = 'YOUR_CHAT_ID'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id
        message = f"üéâ –ò—Ç–æ–≥–∏ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤:\n–£—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã: {cls.success_tests}\n–ù–µ—É—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã: {cls.failed_tests}"
        await bot.send_message(chat_id=chat_id, text=message)

    @pytest.fixture(autouse=True)
    def count_tests(self):
        TestLogin.total_tests += 1
        try:
            yield
        except Exception:
            TestLogin.failed_tests += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
        else:
            TestLogin.success_tests += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤, –µ—Å–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –≤–æ–∑–Ω–∏–∫–ª–æ

    def test_login(self):
        driver = self.driver
        driver.get('http://lk.corp.dev.ru')

        # –í–≤–æ–¥–∏–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        username_input = WebDriverWait(driver, 20).until(
            EC.visibility_of_element_located((By.XPATH, '//*[@id="Email"]'))
        )
        password_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, '#PasswordUser  '))
        )

        username_input.send_keys('ast10@mailforspam.com')  # –í–∞—à email
        password_input.send_keys('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π–ü–∞—Ä–æ–ª—å')  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å

        login_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, '/html/body/div[1]/div/div/div/form/button'))
        )
        login_button.click()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        try:
            error_message = WebDriverWait(driver, 10).until(
                EC.visibility_of_element_located((By.XPATH, '//*[contains(text(), "–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –û—à–∏–±–∫–∞ Active Directory: –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–æ–º–µ–Ω Active Directory")]'))
            )
            assert error_message is not None, "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É—Å–ø–µ—à–Ω–æ!"
            print("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            print(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É—Å–ø–µ—à–Ω–æ: {e}")
            raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —É–≤–µ–ª–∏—á–∏–ª—Å—è

if __name__ == "__main__":
    pytest.main(["-q", "--disable-warnings"])
